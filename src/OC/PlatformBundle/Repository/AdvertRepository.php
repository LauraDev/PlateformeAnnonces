<?php

namespace OC\PlatformBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{
    // public function myFindAll()
    // {
    //     $queryBuilder = $this->createQueryBuilder('a');
    //     $query = $queryBuilder->getQuery();
    //     $results = $query->getResult();
    //     return $results;
    // }


    // public function myFindAll()
    // {
    // return $this
    //     ->createQueryBuilder('a')
    //     ->getQuery()
    //     ->getResult()
    // ;
    // }

    public function getAdverts($page, $nbPerPage)
    {
        $query = $this->createQueryBuilder('a')
            ->orderBy('a.date', 'DESC')
            ->getQuery()
        ;
    
        $query
            ->setFirstResult(($page-1) * $nbPerPage)
            ->setMaxResults($nbPerPage)
        ;

        return new Paginator($query, true);
    }
    

    public function findByAuthorAndDate($author, $year)
    {
        $qb = $this->createQueryBuilder('a');

        $qb->where('a.author = :author')
            ->setParameter('author', $author)
            ->andWhere('a.date < :year')
            ->setParameter('year', $year)
            ->orderBy('a.date', 'DESC')
        ;

        return $qb
            ->getQuery()
            ->getResult()
        ;
    }

    public function getAdvertWithCategories(array $categoryNames)
    {
        $qb = $this->createQueryBuilder('a');

        // On fait une jointure avec l'entité Category avec pour alias « c »
        $qb
        ->innerJoin('a.categories', 'c')
        ->addSelect('c')
        ;

        // Puis on filtre sur le nom des catégories à l'aide d'un IN
        $qb->where($qb->expr()->in('c.name', $categoryNames));
        // La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine

        // Enfin, on retourne le résultat
        return $qb
        ->getQuery()
        ->getResult()
        ;
    }
    
    public function findAdvertsToPurge($days) 
    {
        $date = new \DateTime();
        date_modify($date, '-'. $days .'day');

        
        $qb = $this ->createQueryBuilder('a');
        
        $qb ->where('a.updatedAt IS NOT NULL AND a.updatedAt < :date OR a.updatedAt IS NULL AND a.date < :date')
                ->setParameter('date', $date)
            ->andWhere('a.applications IS EMPTY')
        ;

        return $qb    
            ->getQuery()
            ->getResult()
        ;
    }
}
